---
- name: Hogsmeade Proxmox
  hosts: hogsmeade
  vars:
    ansible_python_interpreter: "/usr/bin/python3"

  handlers:
    - name: Import handlers
      ansible.builtin.import_tasks: handlers/main.yml

  roles:
    - name: Remove PVE subscription nag, enable Dark Theme and manage repos
      role: simoncaron.pve_addons
      vars:
        pve_addons_enable_dark_theme: false
        pve_addons_remove_subscription_nag: true
        pve_addons_disable_enterprise_repo: true
        pve_addons_add_no_subscription_repo: true

    - name: Install Docker
      role: geerlingguy.docker
      vars:
        docker_edition: ce
        docker_yum_repo_enable_test: 0
        docker_yum_repo_enable_nightly: 0
        docker_packages_state: present
        docker_install_compose_plugin: true
        docker_compose_package: docker-compose-plugin
        docker_compose_package_state: present
        docker_install_compose: false
        docker_users:
          - sebastian
        docker_service_manage: true
        docker_service_state: started
        docker_service_enabled: true
        docker_restart_handler_state: restarted
        docker_daemon_options:
          log-driver: "json-file"
          log-opts:
            max-size: "10m"
            max-file: "3"

    - name: Install and configure cloudflared
      role: sebdanielsson.cloudflared
      vars:
        cloudflare_tunnel_enable: true
        cloudflare_tunnel_credential: "{{ lookup('env', 'CLOUDFLARE_TUNNEL_HOGSMEADE') }}"
      state: present

    - name: Install and configure Tailscale
      role: artis3n.tailscale.machine
      tailscale_args: "--ssh"
      vars:
        tailscale_authkey: "{{ lookup('env', 'TAILSCALE_SERVER_OAUTH') }}"
        tailscale_oauth_preauthorized: true
        tailscale_tags: ["server"]
      state: present

    - name: Configure ACME on Proxmox node
      role: simoncaron.pve_acme
      vars:
        pve_acme_domain: "{{ lookup('env', 'PVE_ACME_DOMAIN') }}"
        pve_acme_account_name: default
        pve_acme_account_email: "{{ lookup('env', 'PVE_ACME_ACCOUNT_EMAIL') }}"
        pve_acme_account_directory: "https://acme-v02.api.letsencrypt.org/directory"
        pve_acme_validation_delay: "30"
        pve_acme_plugin_name: "cloudflare"
        pve_acme_plugin_api: "cf"
        pve_acme_plugin_data: "{{ lookup('env', 'PVE_ACME_PLUGIN_DATA') }}"

  tasks:
    - name: SSH authorized key for 'root'
      ansible.posix.authorized_key:
        user: root
        key: "{{ lookup('env', 'SEBASTIAN_SSH_PUBLIC_KEY') }}"
        state: present

    - name: Copy sshd hardening config
      ansible.builtin.copy:
        src: 49-sshd-hardening.conf
        dest: /etc/ssh/sshd_config.d/49-sshd-hardening.conf
        owner: root
        group: root
        mode: "0644"

    - name: Copy ssh hardening config
      ansible.builtin.copy:
        src: 49-ssh-hardening.conf
        dest: /etc/ssh/ssh_config.d/49-ssh-hardening.conf
        owner: root
        group: root
        mode: "0644"

    - name: Ensure 'sebastian' user exists
      ansible.builtin.user:
        name: sebastian
        shell: /bin/bash
        group: sebastian
        groups: root,docker
        append: true
        state: present

    - name: SSH authorized key for 'sebastian'
      ansible.posix.authorized_key:
        user: sebastian
        key: "{{ lookup('env', 'SEBASTIAN_SSH_PUBLIC_KEY') }}"
        state: present

    - name: Install python3-full
      ansible.builtin.apt:
        name:
          - nfs-kernel-server
          - python3-full
        state: present

    - name: Ensure net.ipv4.ip_forward is enabled
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        sysctl_set: true
        reload: true
        sysctl_file: /etc/sysctl.d/99-tailscale.conf
        state: present

    - name: Ensure net.ipv6.conf.all.forwarding is enabled
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        sysctl_set: true
        reload: true
        sysctl_file: /etc/sysctl.d/99-tailscale.conf
        state: present

    - name: Install sudo
      ansible.builtin.apt:
        name:
          - sudo
        state: present

    - name: Add sebastian to sudoers group
      ansible.builtin.user:
        name: sebastian
        groups: sudo
        append: true
        state: present

    - name: Let sudoers group use sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL:ALL) NOPASSWD:ALL"
        create: true
        mode: "0440"
        state: present

    - name: Set hostname
      ansible.builtin.hostname:
        name: hogsmeade
        use: systemd

    - name: Install certbot and certbot-dns-cloudflare
      ansible.builtin.pip:
        name:
          - certbot
          - certbot-dns-cloudflare
        state: present
        virtualenv: ~/python_docker/venv
        virtualenv_site_packages: true

    - name: Add cloudflare_api_key for certbot plugin
      ansible.builtin.lineinfile:
        path: /etc/letsencrypt/cloudflare.ini
        regexp: "^dns_cloudflare_api_token"
        line: "dns_cloudflare_api_token = {{ lookup('env', 'CLOUDFLARE_CERTBOT_API_TOKEN') }}"
        create: true
        mode: "0640"
        state: present

    - name: Add renew hook for Jellyfin cert
      ansible.builtin.blockinfile:
        path: /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
        block: |
          #!/bin/sh
          mkdir -p /certs/jellyfin
          openssl pkcs12 -export -password pass:{{ lookup('env', 'CERTBOT_JELLYFIN_PKCS12_PASSWORD') }} -out /certs/jellyfin/jellyfin.pfx -inkey /etc/letsencrypt/live/{{ lookup('env', 'CERTBOT_JELLYFIN_DOMAIN') }}/privkey.pem -in /etc/letsencrypt/live/{{ lookup('env', 'CERTBOT_JELLYFIN_DOMAIN') }}/cert.pem
          chmod 755 /certs/jellyfin/jellyfin.pfx
          chown root:docker /certs/jellyfin/jellyfin.pfx
        create: true
        mode: "0750"
        state: present

    - name: Create certbot-renew-jellyfin service
      ansible.builtin.copy:
        mode: "0644"
        dest: /etc/systemd/system/certbot-renew-jellyfin.service
        content: |
          [Unit]
          Description=Renew certificates acquired via Certbot
          Documentation=https://eff-certbot.readthedocs.io/en/stable/

          [Service]
          Type=oneshot
          ExecStart=/root/python_docker/venv/bin/certbot renew --quiet --cert-name {{ lookup('env', 'CERTBOT_JELLYFIN_DOMAIN') }} --deploy-hook /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
          PrivateTmp=true

    - name: Create certbot-renew-jellyfin.timer
      ansible.builtin.copy:
        mode: "0644"
        dest: /etc/systemd/system/certbot-renew-jellyfin.timer
        content: |
          [Unit]
          Description=Run Certbot twice daily

          [Timer]
          OnCalendar=*-*-* 00/12:00:00
          RandomizedDelaySec=12h
          Persistent=true

          [Install]
          WantedBy=timers.target

    - name: Enable certbot-renew-jellyfin.timer
      ansible.builtin.systemd:
        name: certbot-renew-jellyfin.timer
        state: started
        enabled: true
        daemon_reload: true

    - name: Obtain cert for Jellyfin
      ansible.builtin.shell: |
        ~/python_docker/venv/bin/certbot certonly \
        --dns-cloudflare \
        --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini \
        --email {{ lookup('env', 'CERTBOT_JELLYFIN_EMAIL') }} \
        --agree-tos \
        --key-type ecdsa \
        --elliptic-curve secp384r1 \
        --rsa-key-size 4096 \
        --hsts \
        --uir \
        --deploy-hook /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh \
        --domain {{ lookup('env', 'CERTBOT_JELLYFIN_DOMAIN') }}
      args:
        creates: /etc/letsencrypt/live/{{ lookup('env', 'CERTBOT_JELLYFIN_DOMAIN') }}/fullchain.pem

    - name: Create ZFS filesystem and set sharenfs property
      community.general.zfs:
        name: chungus/media
        extra_zfs_properties:
          sharenfs: crossmnt,no_root_squash,rw=192.168.1.0/24
        state: present

    - name: Install python3-full
      ansible.builtin.apt:
        name:
          - python3-full
        state: present

    - name: Install required Python packages in the virtual environment
      ansible.builtin.pip:
        name:
          - pyyaml
          - jsondiff
          - docker
          - docker-compose
          - proxmoxer
        state: present
        virtualenv: ~/python_docker/venv
        virtualenv_command: python3 -m venv
        virtualenv_site_packages: true

    - name: Synchronize docker files
      ansible.posix.synchronize:
        src: ../docker/
        dest: /docker/
        archive: true
        delete: true
        owner: false
        group: false
        mode: push
        rsync_opts:
          - "--exclude=.DS_Store"

    - name: Docker System Prune
      ansible.builtin.command: docker system prune --all -f
      changed_when: true

    - name: Run all containers
      ansible.builtin.import_tasks: tasks/hogsmeade-containers.yml
